/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UauthRouteImport } from './routes/_uauth'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AnnonRouteImport } from './routes/_annon'
import { Route as AuthIndexRouteImport } from './routes/_auth/index'
import { Route as UauthVerifyIndexRouteImport } from './routes/_uauth/verify/index'
import { Route as UauthLoginIndexRouteImport } from './routes/_uauth/login/index'
import { Route as UauthForgotPasswordIndexRouteImport } from './routes/_uauth/forgot-password/index'
import { Route as AnnonResetPasswordIndexRouteImport } from './routes/_annon/reset-password/index'
import { Route as AnnonRegisterIndexRouteImport } from './routes/_annon/register/index'
import { Route as AuthSessionsIdRouteImport } from './routes/_auth/sessions/$id'

const UauthRoute = UauthRouteImport.update({
  id: '/_uauth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AnnonRoute = AnnonRouteImport.update({
  id: '/_annon',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)
const UauthVerifyIndexRoute = UauthVerifyIndexRouteImport.update({
  id: '/verify/',
  path: '/verify/',
  getParentRoute: () => UauthRoute,
} as any)
const UauthLoginIndexRoute = UauthLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => UauthRoute,
} as any)
const UauthForgotPasswordIndexRoute =
  UauthForgotPasswordIndexRouteImport.update({
    id: '/forgot-password/',
    path: '/forgot-password/',
    getParentRoute: () => UauthRoute,
  } as any)
const AnnonResetPasswordIndexRoute = AnnonResetPasswordIndexRouteImport.update({
  id: '/reset-password/',
  path: '/reset-password/',
  getParentRoute: () => AnnonRoute,
} as any)
const AnnonRegisterIndexRoute = AnnonRegisterIndexRouteImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => AnnonRoute,
} as any)
const AuthSessionsIdRoute = AuthSessionsIdRouteImport.update({
  id: '/sessions/$id',
  path: '/sessions/$id',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof AuthIndexRoute
  '/sessions/$id': typeof AuthSessionsIdRoute
  '/register': typeof AnnonRegisterIndexRoute
  '/reset-password': typeof AnnonResetPasswordIndexRoute
  '/forgot-password': typeof UauthForgotPasswordIndexRoute
  '/login': typeof UauthLoginIndexRoute
  '/verify': typeof UauthVerifyIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof AuthIndexRoute
  '/sessions/$id': typeof AuthSessionsIdRoute
  '/register': typeof AnnonRegisterIndexRoute
  '/reset-password': typeof AnnonResetPasswordIndexRoute
  '/forgot-password': typeof UauthForgotPasswordIndexRoute
  '/login': typeof UauthLoginIndexRoute
  '/verify': typeof UauthVerifyIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_annon': typeof AnnonRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/_uauth': typeof UauthRouteWithChildren
  '/_auth/': typeof AuthIndexRoute
  '/_auth/sessions/$id': typeof AuthSessionsIdRoute
  '/_annon/register/': typeof AnnonRegisterIndexRoute
  '/_annon/reset-password/': typeof AnnonResetPasswordIndexRoute
  '/_uauth/forgot-password/': typeof UauthForgotPasswordIndexRoute
  '/_uauth/login/': typeof UauthLoginIndexRoute
  '/_uauth/verify/': typeof UauthVerifyIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/sessions/$id'
    | '/register'
    | '/reset-password'
    | '/forgot-password'
    | '/login'
    | '/verify'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sessions/$id'
    | '/register'
    | '/reset-password'
    | '/forgot-password'
    | '/login'
    | '/verify'
  id:
    | '__root__'
    | '/_annon'
    | '/_auth'
    | '/_uauth'
    | '/_auth/'
    | '/_auth/sessions/$id'
    | '/_annon/register/'
    | '/_annon/reset-password/'
    | '/_uauth/forgot-password/'
    | '/_uauth/login/'
    | '/_uauth/verify/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AnnonRoute: typeof AnnonRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  UauthRoute: typeof UauthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_uauth': {
      id: '/_uauth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UauthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_annon': {
      id: '/_annon'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AnnonRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_uauth/verify/': {
      id: '/_uauth/verify/'
      path: '/verify'
      fullPath: '/verify'
      preLoaderRoute: typeof UauthVerifyIndexRouteImport
      parentRoute: typeof UauthRoute
    }
    '/_uauth/login/': {
      id: '/_uauth/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof UauthLoginIndexRouteImport
      parentRoute: typeof UauthRoute
    }
    '/_uauth/forgot-password/': {
      id: '/_uauth/forgot-password/'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof UauthForgotPasswordIndexRouteImport
      parentRoute: typeof UauthRoute
    }
    '/_annon/reset-password/': {
      id: '/_annon/reset-password/'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof AnnonResetPasswordIndexRouteImport
      parentRoute: typeof AnnonRoute
    }
    '/_annon/register/': {
      id: '/_annon/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AnnonRegisterIndexRouteImport
      parentRoute: typeof AnnonRoute
    }
    '/_auth/sessions/$id': {
      id: '/_auth/sessions/$id'
      path: '/sessions/$id'
      fullPath: '/sessions/$id'
      preLoaderRoute: typeof AuthSessionsIdRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AnnonRouteChildren {
  AnnonRegisterIndexRoute: typeof AnnonRegisterIndexRoute
  AnnonResetPasswordIndexRoute: typeof AnnonResetPasswordIndexRoute
}

const AnnonRouteChildren: AnnonRouteChildren = {
  AnnonRegisterIndexRoute: AnnonRegisterIndexRoute,
  AnnonResetPasswordIndexRoute: AnnonResetPasswordIndexRoute,
}

const AnnonRouteWithChildren = AnnonRoute._addFileChildren(AnnonRouteChildren)

interface AuthRouteChildren {
  AuthIndexRoute: typeof AuthIndexRoute
  AuthSessionsIdRoute: typeof AuthSessionsIdRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthIndexRoute: AuthIndexRoute,
  AuthSessionsIdRoute: AuthSessionsIdRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface UauthRouteChildren {
  UauthForgotPasswordIndexRoute: typeof UauthForgotPasswordIndexRoute
  UauthLoginIndexRoute: typeof UauthLoginIndexRoute
  UauthVerifyIndexRoute: typeof UauthVerifyIndexRoute
}

const UauthRouteChildren: UauthRouteChildren = {
  UauthForgotPasswordIndexRoute: UauthForgotPasswordIndexRoute,
  UauthLoginIndexRoute: UauthLoginIndexRoute,
  UauthVerifyIndexRoute: UauthVerifyIndexRoute,
}

const UauthRouteWithChildren = UauthRoute._addFileChildren(UauthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AnnonRoute: AnnonRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  UauthRoute: UauthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
